ylab = "Frequência", col = "chocolate",
border = "brown")
plot4 = df$lucro |> hist(
main = "Lucro",
xlab = "Lucro em Unidades Monetárias",
ylab = "Frequência", col = "chocolate",
border = "brown")
View(df)
disp1 = df |>
ggplot(aes(x = gasto_ped, y = lucro)) +
geom_point() +
labs(subtitle = "Lucro Versus Gastos com Pesquisa e Desenvolvimento",
x = "Gastos em Unidades Monetárias", y = "Lucro") +
theme_economist()
disp1
disp2 = df|>
ggplot(aes(x = gasto_adm, y = lucro)) +
geom_point() +
labs(subtitle = "Lucro Versus Gastos com Despesas Administrativa",
x = "Gastos em Unidades Monetárias",
y = "Lucro em Unidades Monetárias") +
theme_economist()
disp2
disp3 = df|>
ggplot(aes(x = gasto_mkt, y = lucro)) +
geom_point() +
labs(subtitle = "Lucro Versus Gastos com Marketing",
x = "Gastos em Unidades Monetárias",
y = "Lucro em Unidades Monetárias") +
theme_economist()
disp3
disp1 = df |>
ggplot(aes(x = gasto_ped, y = lucro)) +
geom_point() +
labs(subtitle = "Lucro Versus Gastos com Pesquisa e Desenvolvimento",
x = "Gastos em Unidades Monetárias",
y = "Lucro em Unidades Monetárias") +
theme_economist_white()
disp1
disp2 = df|>
ggplot(aes(x = gasto_adm, y = lucro)) +
geom_point() +
labs(subtitle = "Lucro Versus Gastos com Despesas Administrativa",
x = "Gastos em Unidades Monetárias",
y = "Lucro em Unidades Monetárias") +
theme_economist_white()
disp2
disp3 = df|>
ggplot(aes(x = gasto_mkt, y = lucro)) +
geom_point() +
labs(subtitle = "Lucro Versus Gastos com Marketing",
x = "Gastos em Unidades Monetárias",
y = "Lucro em Unidades Monetárias") +
theme_economist_white()
disp3
df |> cor.test(gasto_ped, lucro)
View(df)
rm(a,p)
df$gasto_ped, df$lucro |> cor.test()
cor.test(df$gasto_ped, df$lucro)
cor.test(df$gasto_adm, df$lucro)
cor.test(df$gasto_mkt, df$lucro)
fit1 = lm(lucro ~ gasto_ped, df)
fit1 = lm(lucro ~ gasto_ped, df)
summary(fit1)
anova(fit1)
plot(fit1)
par(mfrow(c(2,2)))
par(m.frow(c(2,2)))
par(mfrow = c(2,2))
plot(fit1)
plot(fit1[-50])
fit1 = lm(lucro ~ gasto_ped, df[-50])
fit1 = lm(lucro ~ gasto_ped, df[50,])
fit1 = lm(lucro ~ gasto_ped, df[-50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
plot(anova(fit1))
qqplot(fit1$residuals)
qqplot(fit1$residuals, fit1$fitted.values)
qqPlot(fit1$residuals)
fit1 = lm(lucro ~ gasto_ped, df[-50,])
fit1 = lm(lucro ~ gasto_ped, df)
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
fit1 = lm(lucro ~ gasto_ped, df[50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
fit1 = lm(lucro ~ gasto_ped, df[-50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
shapiro.test(fit1$residuals)
fit1 = lm(lucro ~ gasto_ped, df)
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
shapiro.test(fit1$residuals)
fit1 = lm(lucro ~ gasto_ped, df[-50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
shapiro.test(fit1$residuals)
library(lmtest)
install.packages("lmtest")
library(lmtest)
lmtest::gqtest(fit1)
fit1 = lm(lucro ~ gasto_ped, df[c(-50, -49, -16, -15),])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
fit1 = lm(lucro ~ gasto_ped, df[c(-50, -37),])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
fit1 = lm(lucro ~ gasto_ped, df[c(-50, -37),])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
fit1 = lm(lucro ~ gasto_ped, df[-50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
shapiro.test(fit1$residuals)
lmtest::gqtest(fit1)
fit2 = lm(lucro ~ gasto_adm, df)
summary(fit2)
anova(fit2)
par(mfrow = c(2,2))
plot(fit2)
shapiro.test(fit2$residuals)
lmtest::gqtest(fit2)
lucro
lucro
fit1 = lm(lucro ~ gasto_ped, df[-50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
shapiro.test(fit1$residuals)
lmtest::gqtest(fit1)
fit2 = lm(lucro ~ gasto_adm, df[-50,])
summary(fit2)
anova(fit2)
par(mfrow = c(2,2))
plot(fit2)
shapiro.test(fit2$residuals)
lmtest::gqtest(fit2)
summary(fit2)
anova(fit2)
fit3 = lm(lucro ~ gasto_mkt, df)
summary(fit3)
anova(fit3)
par(mfrow = c(2,2))
plot(fit3)
shapiro.test(fit3$residuals)
lmtest::gqtest(fit3)
fit3 = lm(lucro ~ gasto_mkt, df[-47])
summary(fit3)
anova(fit3)
par(mfrow = c(2,2))
plot(fit3)
shapiro.test(fit3$residuals)
fit3 = lm(lucro ~ gasto_mkt, df[-47,])
summary(fit3)
anova(fit3)
par(mfrow = c(2,2))
plot(fit3)
shapiro.test(fit3$residuals)
lmtest::gqtest(fit3)
summary(fit1)
anova(fit1)
#teste para b0 e b1
t.test(fit1$coefficients, 0)
#teste para b0 e b1
t.test(fit1$coefficients)
#teste para b0 e b1
t.test(fit1$coefficients[1])
#teste para b0 e b1
t.test(fit1$coefficients[[1]])
fit1$coefficients
#teste para b0 e b1
t.test(fit1$coefficients$gasto_ped)
fit1$coefficients[[1]]
#teste para b0 e b1
t.test(fit1$coefficients[[1]])
ggsave("Figura 1", disp1, path = "./plots")
ggsave("Figura 1", plot = disp1, path = "./plots")
ggsave("Figura 1", plot = disp1, path = "./plots", device = "png")
ggsave("Figura 2", plot = disp2, path = "./plots", device = "png")
ggsave("Figura 3", plot = disp3, path = "./plots", device = "png")
png("Figura 4", plot(fit1))
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
fit2 = lm(lucro ~ gasto_adm, df[-50,])
summary(fit2)
anova(fit2)
par(mfrow = c(2,2))
plot(fit2)
shapiro.test(fit2$residuals)
fit3 = lm(lucro ~ gasto_mkt, df[-47,])
summary(fit3)
anova(fit3)
par(mfrow = c(2,2))
plot(fit3)
shapiro.test(fit3$residuals)
lmtest::gqtest(fit3)
#correlação de 97% com evidência de relação a 95%
cor.test(df$gasto_ped, df$lucro)
#correlação de 20%, sem evidência de relação entre as variáveis a 95%
cor.test(df$gasto_adm, df$lucro)
shapiro.test(fit2$residuals)
summary(fit1)
summary(fit2)
summary(fit3)
a = c(97.8, 97.2, 97.4, 97.6, 97.8, 97.9, 98.0, 98.0, 98.0, 98.1, 98.2,
98.3, 98.3, 98.4, 98.4, 98.4, 98.5, 98.6, 98.6, 98.7,
98.8, 98.8, 98.9, 98.9, 99.0)
a = c(97.8, 97.2, 97.4, 97.6, 97.8, 97.9, 98.0, 98.0, 98.0, 98.1, 98.2,
98.3, 98.3, 98.4, 98.4, 98.4, 98.5, 98.6, 98.6, 98.7,
98.8, 98.8, 98.9, 98.9, 99.0)
mean(a)
sd(a)
s = list(c(8,8), c(8,2), c(8,2), c(8,11), c(8,4), c(8,7),
c(2,8), c(2,2), c(2,2), c(2,11), c(2,4), c(2,7), c(2,8), c(2,2),
c(2,2), c(2,11), c(2,4), c(2,7), c(11,8), c(11,2), c(11,2),
c(11,11), c(11,4), c(11,7), c(4,8), c(4,2), c(4,2), c(4,11),
c(4,4), c(4,7), c(7,8), c(7,2), c(7,2), c(7,11),c(7,4), c(7,7))
for (i in s){
print(sd(i))
}
for (i in s){
print((i[1] - mean(i))^2 + i[2] - mean(i))^2)
}
for (i in s){
print((i[1] - mean(i))^2 + (i[2] - mean(i))^2)
}
shapiro.test(fit3$residuals)
fit1 = lm(lucro ~ gasto_ped, df[-50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
shapiro.test(fit1$residuals)
fit1 = lm(lucro ~ gasto_ped, df[-50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
shapiro.test(fit1$residuals)
fit1 = lm(lucro ~ gasto_ped, df[-50,])
summary(fit1)
anova(fit1)
par(mfrow = c(2,2))
plot(fit1)
shapiro.test(fit1$residuals)
numeros = seq(1:25)
numeros
c(1,2,3) = c(3,2,1)
c(1,2,3) == c(3,2,1)
c(1,2,3) == sort(c(3,2,1))
count = 0
numeros = seq(1:25)
n = 20000000
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio) == sort(numeros_reais)){
count = count +1
}
}
count/n
count = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio) == sort(numeros_reais)){
count = count +1
}
}
count/n
count = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio) == sort(numeros_reais)){
count = count +1
}
}
count/n
count = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio) == sort(numeros_reais)){
count = count +1
}
}
count/n
count = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio) == sort(numeros_reais)){
count = count +1
}
}
count/n
count = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio) == sort(numeros_reais)){
count = count +1
}
}
count/n
warnings()
count = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (c(sort(sorteio)) == c(sort(numeros_reais))){
count = count +1
}
}
count/n
count = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio)[1] == sort(numeros_reais)[1] &
sort(sorteio)[2] == sort(numeros_reais)[2] &
sort(sorteio)[3] == sort(numeros_reais)[3]){
pass
}
else{
cont = cont +1
}
}
cont = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio)[1] == sort(numeros_reais)[1] &
sort(sorteio)[2] == sort(numeros_reais)[2] &
sort(sorteio)[3] == sort(numeros_reais)[3]){
pass
}
else{
cont = cont +1
}
}
cont = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (sort(sorteio)[1] == sort(numeros_reais)[1] &
sort(sorteio)[2] == sort(numeros_reais)[2] &
sort(sorteio)[3] == sort(numeros_reais)[3]){
cont = cont +1
}
}
cont/n
ont = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
cont = 0
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
numeros = seq(1:25)
n = 100
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
numeros = seq(1:25)
n = 1000
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
numeros = seq(1:25)
n = 10000
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
numeros = seq(1:25)
n = 100000
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
cont = 0
numeros = seq(1:25)
n = 1000000
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
cont = 0
numeros = seq(1:25)
n = 10000000
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont/n
cont = 0
numeros = seq(1:25)
n = 10000000
for(i in seq(1:n)){
numeros_reais = sample(numeros, 15)
sorteio = sample(numeros, 15)
if (all(sort(sorteio)== sort(numeros_reais))){
cont = cont +1
}
}
cont
cont/n
4e-07
